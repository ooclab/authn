swagger: '2.0'
info:
  version: '1.0'
  title: 'authn'
  description: |
    AuthN 服务 -- 提供用户身份鉴定服务

    ## 约定

    - 命名中英文无论单复数尽量统一用单数形式
    - 表示时间的字符串如无特别说明，统一指 RFC3339 UTC 格式，示例： `2017-05-30T01:45:39.871980Z`

    ## 设计思考

    分两种角色：
    1. 用户及其创建的应用（App）角色：即我的账户/应用。可以获取/刷新 token、创建/更新/删除 App
    2. 管理员角色：创建/更新/删除用户

    用户管理，用户属性，和其他账户集成等功能，留在定制化的 account 服务完成。

  contact:
    name: OOCLAB
    url: 'https://ooclab.com'
    email: info@ooclab.com

host: localhost:3000
schemes:
- http

tags:
- name: token
  description: Token
- name: app
  description: App
- name: user
  description: 用户


paths:

  "/_health":
    get:
      tags:
      - default
      summary: 查看健康状态
      responses:
        "200":
          description: 返回 "ok" 表示服务运行健康

  "/_spec":
    get:
      tags:
      - default
      summary: 获取 YAML 格式的 SwaggerUI 文档（即本文档）
      produces:
      - application/yaml
      responses:
        "200":
          description: 返回 YAML 文档

  "/signin":

    post:
      deprecated: true
      tags:
      - token
      summary: 用户登录（获取 token）
      description: 用户登录，获取 Token (JWT)
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: body
        in: body
        description: 请求数据
        schema:
          type: object
          required:
          - username
          - password
          properties:
            username:
              type: string
              description: 用户名
            password:
              type: string
              description: 密码
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseTokenData'
        default:
          description: |
            返回错误信息

            error 值及含义：
            - `username-or-password-incorrect` : 用户名或密码错误
            - `user-inactive` : 用户已被禁用，请联系管理员
          schema:
            $ref: '#/definitions/DefaultErrorResponse'

  "/token":

    post:
      deprecated: true
      tags:
      - token
      summary: App 登录（获取 token）
      description: |
        通过 App 获取 access_token ，结果与使用用户名和密码登录的方式一样。
        区别：
        1. 一个用户可以拥有多个 App，每个 App 有自己的认证凭证，适合在不同场合使用
        2. App 获取的 access_token 有效期比普通登录的方式要长
      parameters:
      - name: body
        in: body
        description: 请求数据
        schema:
          type: object
          required:
            - api_key
            - api_secret
          properties:
            api_key:
              type: string
              description: The Api Key
            api_secret:
              type: string
              description: The Api Secret
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseTokenData'
        default:
          description: |
            返回错误信息

            error 值及含义：
            - `incorrect-key-or-secret` : `api_key` 或 `api_secret` 错误
            - `inactive-app` : App 已被禁用，请启用后再尝试
            - `inactive-user` : 用户已被禁用，请联系管理员
          schema:
            $ref: '#/definitions/DefaultErrorResponse'

  "/token/refresh":

    get:
      deprecated: true
      tags:
      - token
      summary: 刷新 token
      description: |
        用户或App都可以通过 refresh_token 刷新 access_token
      parameters:
      - name: refresh_token
        in: query
        type: string
        description: 刷新 token
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseTokenData'
        default:
          description: |
            返回错误信息

            error 值及含义：
            - `need-refresh-token` : 请求未提供 `refresh_token` 参数
            - `invalid-refresh-token` : 提供了无效的 `refresh_token`
            - `is-expired` : `refresh_token` 已经过期，请重新“登录”
            - `user-inactive` : 用户已被禁用，请联系管理员
            - `invalid-access-type` : 应该不会出现
          schema:
            $ref: '#/definitions/DefaultErrorResponse'

  "/app":

    parameters:
    - $ref: '#/parameters/Authorization'

    get:
      deprecated: true
      tags:
      - app
      summary: 查看我的所有App
      description: |
        用户查看自己的所有 App
      responses:
        "200":
            description: OK
            schema:
              type: object
              required:
              - data
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/definitions/AppSimple'

    post:
      deprecated: true
      tags:
      - app
      summary: 创建我的App
      description: |
        用户创建一个新的 App
      parameters:
      - name: body
        in: body
        description: 请求数据
        schema:
          type: object
          required:
          - name
          - api_secret
          - summary
          properties:
            name:
              type: string
              description: 名字（不能重复）
            api_secret:
              type: string
              minLength: 32
              maxLength: 128
              description: 密码
            summary:
              type: string
              description: 简短描述
            description:
              type: string
              description: 详细描述
      responses:
        "200":
          description: OK
          schema:
            type: object
            required:
              - id
            properties:
              id:
                type: integer
                description: 成功创建的 App ID
        default:
          description: |
            返回错误信息

            error 值及含义：
            - `duplicate-app-name` : 名称重复
            - `reach-max-app` : 超过允许的 App 数量（默认为5个）
          schema:
            $ref: '#/definitions/DefaultErrorResponse'

  "/app/{id}":

    parameters:
    - $ref: '#/parameters/Authorization'
    - name: id
      in: path
      type: string
      format: uuid
      required: true
      description: 应用ID

    get:
      deprecated: true
      tags:
      - app
      summary: 查看指定应用详情
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/App'
        default:
          description: |
            返回错误信息
            error 值及含义：
            - `not-found` : 应用不存在
          schema:
            $ref: '#/definitions/DefaultErrorResponse'

    post:
      deprecated: true
      tags:
      - app
      summary: 更新指定应用属性
      parameters:
      - name: body
        in: body
        description: 请求数据
        schema:
          type: object
          properties:
            name:
              type: string
              description: 名字（必须在当前账户下唯一）
              minLength: 2
              maxLength: 16
            api_secret:
              type: string
              description: 密码
              minLength: 16
              maxLength: 128
            is_active:
              type: boolean
              description: 是否可用
            summary:
              type: string
              description: 简介
            description:
              type: string
              description: 详细描述
      responses:
        "200":
          description: OK
        default:
          description: |
            返回错误信息
            error 值及含义：
            - `not-found` : 应用不存在
            - `name-exist` : 名称已经存在
          schema:
            $ref: '#/definitions/DefaultErrorResponse'

    delete:
      deprecated: true
      tags:
      - app
      summary: 删除指定应用
      responses:
        "200":
          description: OK
        default:
          description: |
            返回错误信息
            error 值及含义：
            - `not-found` : 应用不存在
          schema:
            $ref: '#/definitions/DefaultErrorResponse'

  "/user":

    post:
      tags:
      - user
      summary: 创建用户
      description: |
        需要权限 `auth-user-create`
      parameters:
      - $ref: '#/parameters/Authorization'
      - name: body
        in: body
        schema:
          type: object
          required:
          - username
          - password
          properties:
            username:
              type: string
              description: 用户名（必须全局唯一）
              minLength: 2
              maxLength: 32
            password:
              type: string
              description: 密码
              maxLength: 64
      responses:
        "200":
          description: OK
          schema:
            type: object
            properties:
              uid:
                type: string
                description: 成功创建的用户 UID
        default:
          description: |
            返回错误信息
            error 值及含义：
            - `username-exist` : 用户名已存在
          schema:
            $ref: '#/definitions/DefaultErrorResponse'

  "/user/{id}":

    parameters:
    - $ref: '#/parameters/Authorization'
    - name: id
      in: path
      type: string
      format: uuid
      required: true
      description: 用户UID

    get:
      deprecated: true
      tags:
      - user
      summary: 查看用户信息
      description: |
        需要权限 `auth-user-view`
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        default:
          description: |
            返回错误信息
            error 值及含义：
            - `not-found` : 用户不存在
          schema:
            $ref: '#/definitions/DefaultErrorResponse'

    post:
      deprecated: true
      tags:
      - user
      summary: 更新用户信息
      description: |
        需要权限 `auth-user-edit`
      parameters:
      - name: body
        in: body
        description: 请求数据
        schema:
          type: object
          properties:
            username:
              type: string
              description: 更新用户名（username必须全局唯一）
              minLength: 5
              maxLength: 16
            password:
              type: string
              description: 更新密码
              minLength: 6
              maxLength: 32
            is_active:
              type: boolean
              description: 是否可用
      responses:
        "200":
          description: OK
        default:
          description: |
            返回错误信息
            error 值及含义：
            - `not-found` : 用户不存在
          schema:
            $ref: '#/definitions/DefaultErrorResponse'

    delete:
      deprecated: true
      tags:
      - user
      summary: 删除指定用户
      description: |
        分布式系统中删除指定用户涉及多个流程，举例：
        1. authn 禁止用户（删除中）
        2. authn 发布删除用户消息
        3. 其他系统订阅/查询到某个用户已经被删除，清理内部数据
        4. authn 发现所有信息已经被清理，完成最终删除

        如何让 authn 知道当前所有依赖的系统中，用户数据已经被清理完成？
        可能的方法有：
        1. 服务之间关联，以及跨服务对象的关联，需要统一注册和保存（这是另外一个独立服务）。被关联/订阅者可以通过该服务获取其他人信息（有必要？），也可以通过该服务获取某个对象删除，依赖的系统是否清理完成（有必要）。

        当前先清理本系统，无论如何，其他系统需要自行处理用户已经被删除的“异常”
      responses:
        "200":
          description: OK
        default:
          description: |
            返回错误信息
            error 值及含义：
            - `not-found` : 用户不存在
          schema:
            $ref: '#/definitions/DefaultErrorResponse'


definitions:

  ResponseTokenData:
    type: object
    required:
    - access_token
    - expires_in
    - refresh_token
    properties:
      access_token:
        type: string
        description: jwt 格式的 token, 用户访问凭证
      expires_in:
        type: string
        description: 表示 access_token 的失效时间
      refresh_token:
        type: string
        description: 刷新 access_token 时用到

  DefaultErrorResponse:
    type: object
    required:
    - status
    properties:
      status:
        type: string
        description: 错误字符串
      message:
        type: string
        description: 错误描述信息
      errors:
        type: string
        description: 有多个错误值时（通常发生在验证表单失败时）
      data:
        type: object
        properties:
          status_code:
            type: integer
            format: int
            description: 错误码
          exc_info:
            type: string
            description: 详细错误信息

  User:
    type: object
    required:
    - id
    - username
    - is_active
    - created
    - updated
    properties:
      id:
        type: string
        format: uuid
        description: ID
      is_active:
        type: boolean
        description: 是否启用
      username:
        type: string
        description: 用户名
      created:
        type: string
        format: date-time
        description: 创建时间
      updated:
        type: string
        format: date-time
        description: 更新时间

  AppSimple:
    type: object
    description: |
      **提示** `api_key` 这里显示, `api_secret` 由用户创建时提供，数据库不存放原始密码，因此无法显示，需要用户自行记录。
    required:
    - id
    - api_key
    - is_active
    - name
    - summary
    properties:
      id:
        type: string
        format: uuid
        description: ID
      api_key:
        type: string
        description: Key
      is_active:
        type: boolean
        description: 是否启用
      name:
        type: string
        description: 名字
      summary:
        type: string
        description: 简介

  App:
    type: object
    description: 用户（自己的）App详情
    required:
    - id
    - api_key
    - is_active
    - name
    - summary
    - created
    - updated
    properties:
      id:
        type: string
        format: uuid
        description: ID
      api_key:
        type: string
        description: Key
      is_active:
        type: boolean
        description: 是否启用
      name:
        type: string
        description: 名字
      summary:
        type: string
        description: 简介
      description:
        type: string
        description: 详细描述
      created:
        type: string
        format: date-time
        description: 创建时间
      updated:
        type: string
        format: date-time
        description: 更新时间

parameters:

  Authorization:
    name: Authorization
    in: header
    type: string
    description: 提供 JWT Token, 格式 `"Bearer {TOKEN}"`
    required: true
